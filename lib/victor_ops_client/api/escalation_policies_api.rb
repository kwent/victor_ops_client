=begin
#VictorOps API

#This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  https protocol is required to use this API.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

OpenAPI spec version: 0.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module VictorOpsClient
  class EscalationPoliciesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a list of escalation policy info
    # Retrieves a list of all escalation policy summaries and their associated teams that exist in your organization. If the optional `filter` query parameter is present, retrieves a list of all escalation policy summaries with a name matching the provided search filter.  This is the recommended way for determining to which team an escalation policy belongs.  This API may be called a maximum of 2 times per second.
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter An escalation policy name to be used for filtering the results. Note: If this parameter is present, it must be at least three (3) characters long
    # @return [EscalationPolicyInfoList]
    def api_public_v1_policies_get(x_vo_api_id, x_vo_api_key, opts = {})
      data, _status_code, _headers = api_public_v1_policies_get_with_http_info(x_vo_api_id, x_vo_api_key, opts)
      data
    end

    # Get a list of escalation policy info
    # Retrieves a list of all escalation policy summaries and their associated teams that exist in your organization. If the optional &#x60;filter&#x60; query parameter is present, retrieves a list of all escalation policy summaries with a name matching the provided search filter.  This is the recommended way for determining to which team an escalation policy belongs.  This API may be called a maximum of 2 times per second.
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter An escalation policy name to be used for filtering the results. Note: If this parameter is present, it must be at least three (3) characters long
    # @return [Array<(EscalationPolicyInfoList, Fixnum, Hash)>] EscalationPolicyInfoList data, response status code and response headers
    def api_public_v1_policies_get_with_http_info(x_vo_api_id, x_vo_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EscalationPoliciesApi.api_public_v1_policies_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling EscalationPoliciesApi.api_public_v1_policies_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling EscalationPoliciesApi.api_public_v1_policies_get"
      end
      # resource path
      local_var_path = '/api-public/v1/policies'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EscalationPolicyInfoList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EscalationPoliciesApi#api_public_v1_policies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a specified escalation policy
    # Deletes a specific escalaton policy based on the unique policy slug provided in the path.  Any routing keys which ONLY contain this policy will also be deleted.  This API may be called a maximum of 2 times per second.
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param policy The uniquely identifying escalation policy slug. The policy slug is in the format &#x60;pol-[\\w\\d]{16}&#x60;
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_public_v1_policies_policy_delete(x_vo_api_id, x_vo_api_key, policy, opts = {})
      api_public_v1_policies_policy_delete_with_http_info(x_vo_api_id, x_vo_api_key, policy, opts)
      nil
    end

    # Delete a specified escalation policy
    # Deletes a specific escalaton policy based on the unique policy slug provided in the path.  Any routing keys which ONLY contain this policy will also be deleted.  This API may be called a maximum of 2 times per second.
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param policy The uniquely identifying escalation policy slug. The policy slug is in the format &#x60;pol-[\\w\\d]{16}&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_public_v1_policies_policy_delete_with_http_info(x_vo_api_id, x_vo_api_key, policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EscalationPoliciesApi.api_public_v1_policies_policy_delete ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling EscalationPoliciesApi.api_public_v1_policies_policy_delete"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling EscalationPoliciesApi.api_public_v1_policies_policy_delete"
      end
      # verify the required parameter 'policy' is set
      if @api_client.config.client_side_validation && policy.nil?
        fail ArgumentError, "Missing the required parameter 'policy' when calling EscalationPoliciesApi.api_public_v1_policies_policy_delete"
      end
      # resource path
      local_var_path = '/api-public/v1/policies/{policy}'.sub('{' + 'policy' + '}', policy.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EscalationPoliciesApi#api_public_v1_policies_policy_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific escalation policy
    # Gets a specific escalation policy based on the unique policy slug provided in the path.  The context for which team this policy belongs to is not available at this level. To retrieve information about this escalation policy's team, you must retrieve all of the policy summaries. The escalation policy summaries include links to this endpoint for each escalation policy.  This API may be called a maximum of 2 times per second.
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param policy The uniquely identifying escalation policy slug.  Thus slug is in the format &#x60;pol-[\\w\\d]{16}&#x60;
    # @param [Hash] opts the optional parameters
    # @return [EscalationPolicy]
    def api_public_v1_policies_policy_get(x_vo_api_id, x_vo_api_key, policy, opts = {})
      data, _status_code, _headers = api_public_v1_policies_policy_get_with_http_info(x_vo_api_id, x_vo_api_key, policy, opts)
      data
    end

    # Get a specific escalation policy
    # Gets a specific escalation policy based on the unique policy slug provided in the path.  The context for which team this policy belongs to is not available at this level. To retrieve information about this escalation policy&#39;s team, you must retrieve all of the policy summaries. The escalation policy summaries include links to this endpoint for each escalation policy.  This API may be called a maximum of 2 times per second.
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param policy The uniquely identifying escalation policy slug.  Thus slug is in the format &#x60;pol-[\\w\\d]{16}&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(EscalationPolicy, Fixnum, Hash)>] EscalationPolicy data, response status code and response headers
    def api_public_v1_policies_policy_get_with_http_info(x_vo_api_id, x_vo_api_key, policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EscalationPoliciesApi.api_public_v1_policies_policy_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling EscalationPoliciesApi.api_public_v1_policies_policy_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling EscalationPoliciesApi.api_public_v1_policies_policy_get"
      end
      # verify the required parameter 'policy' is set
      if @api_client.config.client_side_validation && policy.nil?
        fail ArgumentError, "Missing the required parameter 'policy' when calling EscalationPoliciesApi.api_public_v1_policies_policy_get"
      end
      # resource path
      local_var_path = '/api-public/v1/policies/{policy}'.sub('{' + 'policy' + '}', policy.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EscalationPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EscalationPoliciesApi#api_public_v1_policies_policy_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an escalation policy
    # Takes an entire escalation policy and creates it.  For the purpose of using this API, escalation policies are treated as immutable. The policy will not be able to be updated or modified in any way via this API once created. It will only be able to be deleted. However, The escalation policies are accessable in the UI once created and can be updated from there.  This API may be called a maximum of 2 times per second.
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body The request body needed to create an escalation policy
    # @param [Hash] opts the optional parameters
    # @return [EscalationPolicy]
    def api_public_v1_policies_post(x_vo_api_id, x_vo_api_key, body, opts = {})
      data, _status_code, _headers = api_public_v1_policies_post_with_http_info(x_vo_api_id, x_vo_api_key, body, opts)
      data
    end

    # Create an escalation policy
    # Takes an entire escalation policy and creates it.  For the purpose of using this API, escalation policies are treated as immutable. The policy will not be able to be updated or modified in any way via this API once created. It will only be able to be deleted. However, The escalation policies are accessable in the UI once created and can be updated from there.  This API may be called a maximum of 2 times per second.
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body The request body needed to create an escalation policy
    # @param [Hash] opts the optional parameters
    # @return [Array<(EscalationPolicy, Fixnum, Hash)>] EscalationPolicy data, response status code and response headers
    def api_public_v1_policies_post_with_http_info(x_vo_api_id, x_vo_api_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EscalationPoliciesApi.api_public_v1_policies_post ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling EscalationPoliciesApi.api_public_v1_policies_post"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling EscalationPoliciesApi.api_public_v1_policies_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EscalationPoliciesApi.api_public_v1_policies_post"
      end
      # resource path
      local_var_path = '/api-public/v1/policies'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EscalationPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EscalationPoliciesApi#api_public_v1_policies_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of escalation policies for a team
    # Please see the Escalation Policies section for retrieving information on escalation policies  Get the escalation policies for the specified team.  This API may be called a maximum of 2 times per second.
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param team The VictorOps team to fetch
    # @param [Hash] opts the optional parameters
    # @return [EscalationPolicyInfoList]
    def api_public_v1_team_team_policies_get(x_vo_api_id, x_vo_api_key, team, opts = {})
      data, _status_code, _headers = api_public_v1_team_team_policies_get_with_http_info(x_vo_api_id, x_vo_api_key, team, opts)
      data
    end

    # Retrieve a list of escalation policies for a team
    # Please see the Escalation Policies section for retrieving information on escalation policies  Get the escalation policies for the specified team.  This API may be called a maximum of 2 times per second.
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param team The VictorOps team to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(EscalationPolicyInfoList, Fixnum, Hash)>] EscalationPolicyInfoList data, response status code and response headers
    def api_public_v1_team_team_policies_get_with_http_info(x_vo_api_id, x_vo_api_key, team, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EscalationPoliciesApi.api_public_v1_team_team_policies_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling EscalationPoliciesApi.api_public_v1_team_team_policies_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling EscalationPoliciesApi.api_public_v1_team_team_policies_get"
      end
      # verify the required parameter 'team' is set
      if @api_client.config.client_side_validation && team.nil?
        fail ArgumentError, "Missing the required parameter 'team' when calling EscalationPoliciesApi.api_public_v1_team_team_policies_get"
      end
      # resource path
      local_var_path = '/api-public/v1/team/{team}/policies'.sub('{' + 'team' + '}', team.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EscalationPolicyInfoList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EscalationPoliciesApi#api_public_v1_team_team_policies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
