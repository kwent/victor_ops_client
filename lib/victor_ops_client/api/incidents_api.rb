=begin
#VictorOps API

#This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  https protocol is required to use this API.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

OpenAPI spec version: 0.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module VictorOpsClient
  class IncidentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Acknowledge an incident or list of incidents
    # The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body Ack/Resolve payload
    # @param [Hash] opts the optional parameters
    # @return [AckOrResolveResponse]
    def api_public_v1_incidents_ack_patch(x_vo_api_id, x_vo_api_key, body, opts = {})
      data, _status_code, _headers = api_public_v1_incidents_ack_patch_with_http_info(x_vo_api_id, x_vo_api_key, body, opts)
      data
    end

    # Acknowledge an incident or list of incidents
    # The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body Ack/Resolve payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(AckOrResolveResponse, Fixnum, Hash)>] AckOrResolveResponse data, response status code and response headers
    def api_public_v1_incidents_ack_patch_with_http_info(x_vo_api_id, x_vo_api_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.api_public_v1_incidents_ack_patch ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling IncidentsApi.api_public_v1_incidents_ack_patch"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling IncidentsApi.api_public_v1_incidents_ack_patch"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IncidentsApi.api_public_v1_incidents_ack_patch"
      end
      # resource path
      local_var_path = '/api-public/v1/incidents/ack'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AckOrResolveResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#api_public_v1_incidents_ack_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Acknowledge all incidents for which a user was paged.
    # The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body Ack/Resolve payload
    # @param [Hash] opts the optional parameters
    # @return [AckOrResolveResponse]
    def api_public_v1_incidents_by_user_ack_patch(x_vo_api_id, x_vo_api_key, body, opts = {})
      data, _status_code, _headers = api_public_v1_incidents_by_user_ack_patch_with_http_info(x_vo_api_id, x_vo_api_key, body, opts)
      data
    end

    # Acknowledge all incidents for which a user was paged.
    # The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body Ack/Resolve payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(AckOrResolveResponse, Fixnum, Hash)>] AckOrResolveResponse data, response status code and response headers
    def api_public_v1_incidents_by_user_ack_patch_with_http_info(x_vo_api_id, x_vo_api_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.api_public_v1_incidents_by_user_ack_patch ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling IncidentsApi.api_public_v1_incidents_by_user_ack_patch"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling IncidentsApi.api_public_v1_incidents_by_user_ack_patch"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IncidentsApi.api_public_v1_incidents_by_user_ack_patch"
      end
      # resource path
      local_var_path = '/api-public/v1/incidents/byUser/ack'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AckOrResolveResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#api_public_v1_incidents_by_user_ack_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve all incidents for which a user was paged.
    # The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body Ack/Resolve payload
    # @param [Hash] opts the optional parameters
    # @return [AckOrResolveResponse]
    def api_public_v1_incidents_by_user_resolve_patch(x_vo_api_id, x_vo_api_key, body, opts = {})
      data, _status_code, _headers = api_public_v1_incidents_by_user_resolve_patch_with_http_info(x_vo_api_id, x_vo_api_key, body, opts)
      data
    end

    # Resolve all incidents for which a user was paged.
    # The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body Ack/Resolve payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(AckOrResolveResponse, Fixnum, Hash)>] AckOrResolveResponse data, response status code and response headers
    def api_public_v1_incidents_by_user_resolve_patch_with_http_info(x_vo_api_id, x_vo_api_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.api_public_v1_incidents_by_user_resolve_patch ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling IncidentsApi.api_public_v1_incidents_by_user_resolve_patch"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling IncidentsApi.api_public_v1_incidents_by_user_resolve_patch"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IncidentsApi.api_public_v1_incidents_by_user_resolve_patch"
      end
      # resource path
      local_var_path = '/api-public/v1/incidents/byUser/resolve'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AckOrResolveResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#api_public_v1_incidents_by_user_resolve_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get current incident information
    # Get a list of the currently open, acknowledged and recently resolved incidents.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param [Hash] opts the optional parameters
    # @return [IncidentList]
    def api_public_v1_incidents_get(x_vo_api_id, x_vo_api_key, opts = {})
      data, _status_code, _headers = api_public_v1_incidents_get_with_http_info(x_vo_api_id, x_vo_api_key, opts)
      data
    end

    # Get current incident information
    # Get a list of the currently open, acknowledged and recently resolved incidents.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(IncidentList, Fixnum, Hash)>] IncidentList data, response status code and response headers
    def api_public_v1_incidents_get_with_http_info(x_vo_api_id, x_vo_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.api_public_v1_incidents_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling IncidentsApi.api_public_v1_incidents_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling IncidentsApi.api_public_v1_incidents_get"
      end
      # resource path
      local_var_path = '/api-public/v1/incidents'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IncidentList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#api_public_v1_incidents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a single incident
    # Get detailed data for a single incident with the provided incident number, if it exists. The incident will be returned regardless if it is active or not.   This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param incident_number The Victorops incident number
    # @param [Hash] opts the optional parameters
    # @return [IncidentInfo]
    def api_public_v1_incidents_incident_number_get(x_vo_api_id, x_vo_api_key, incident_number, opts = {})
      data, _status_code, _headers = api_public_v1_incidents_incident_number_get_with_http_info(x_vo_api_id, x_vo_api_key, incident_number, opts)
      data
    end

    # Get a single incident
    # Get detailed data for a single incident with the provided incident number, if it exists. The incident will be returned regardless if it is active or not.   This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param incident_number The Victorops incident number
    # @param [Hash] opts the optional parameters
    # @return [Array<(IncidentInfo, Fixnum, Hash)>] IncidentInfo data, response status code and response headers
    def api_public_v1_incidents_incident_number_get_with_http_info(x_vo_api_id, x_vo_api_key, incident_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.api_public_v1_incidents_incident_number_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling IncidentsApi.api_public_v1_incidents_incident_number_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling IncidentsApi.api_public_v1_incidents_incident_number_get"
      end
      # verify the required parameter 'incident_number' is set
      if @api_client.config.client_side_validation && incident_number.nil?
        fail ArgumentError, "Missing the required parameter 'incident_number' when calling IncidentsApi.api_public_v1_incidents_incident_number_get"
      end
      # resource path
      local_var_path = '/api-public/v1/incidents/{incidentNumber}'.sub('{' + 'incidentNumber' + '}', incident_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IncidentInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#api_public_v1_incidents_incident_number_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the notes associated with an incident
    # Get notes any associated with a single incident with the provided incident number.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param incident_number The incident number
    # @param [Hash] opts the optional parameters
    # @return [Notes]
    def api_public_v1_incidents_incident_number_notes_get(x_vo_api_id, x_vo_api_key, incident_number, opts = {})
      data, _status_code, _headers = api_public_v1_incidents_incident_number_notes_get_with_http_info(x_vo_api_id, x_vo_api_key, incident_number, opts)
      data
    end

    # Get the notes associated with an incident
    # Get notes any associated with a single incident with the provided incident number.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param incident_number The incident number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notes, Fixnum, Hash)>] Notes data, response status code and response headers
    def api_public_v1_incidents_incident_number_notes_get_with_http_info(x_vo_api_id, x_vo_api_key, incident_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.api_public_v1_incidents_incident_number_notes_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_get"
      end
      # verify the required parameter 'incident_number' is set
      if @api_client.config.client_side_validation && incident_number.nil?
        fail ArgumentError, "Missing the required parameter 'incident_number' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_get"
      end
      # resource path
      local_var_path = '/api-public/v1/incidents/{incidentNumber}/notes'.sub('{' + 'incidentNumber' + '}', incident_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Notes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#api_public_v1_incidents_incident_number_notes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a Note
    # Delete a note.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param incident_number The incident number
    # @param note_name The html encoded name field of the note
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_public_v1_incidents_incident_number_notes_note_name_delete(x_vo_api_id, x_vo_api_key, incident_number, note_name, opts = {})
      api_public_v1_incidents_incident_number_notes_note_name_delete_with_http_info(x_vo_api_id, x_vo_api_key, incident_number, note_name, opts)
      nil
    end

    # Delete a Note
    # Delete a note.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param incident_number The incident number
    # @param note_name The html encoded name field of the note
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_public_v1_incidents_incident_number_notes_note_name_delete_with_http_info(x_vo_api_id, x_vo_api_key, incident_number, note_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.api_public_v1_incidents_incident_number_notes_note_name_delete ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_note_name_delete"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_note_name_delete"
      end
      # verify the required parameter 'incident_number' is set
      if @api_client.config.client_side_validation && incident_number.nil?
        fail ArgumentError, "Missing the required parameter 'incident_number' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_note_name_delete"
      end
      # verify the required parameter 'note_name' is set
      if @api_client.config.client_side_validation && note_name.nil?
        fail ArgumentError, "Missing the required parameter 'note_name' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_note_name_delete"
      end
      # resource path
      local_var_path = '/api-public/v1/incidents/{incidentNumber}/notes/{noteName}'.sub('{' + 'incidentNumber' + '}', incident_number.to_s).sub('{' + 'noteName' + '}', note_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#api_public_v1_incidents_incident_number_notes_note_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Note
    # Update a note.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body 
    # @param incident_number The incident number
    # @param note_name The html encoded name field of the note
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_public_v1_incidents_incident_number_notes_note_name_put(x_vo_api_id, x_vo_api_key, body, incident_number, note_name, opts = {})
      api_public_v1_incidents_incident_number_notes_note_name_put_with_http_info(x_vo_api_id, x_vo_api_key, body, incident_number, note_name, opts)
      nil
    end

    # Update a Note
    # Update a note.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body 
    # @param incident_number The incident number
    # @param note_name The html encoded name field of the note
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_public_v1_incidents_incident_number_notes_note_name_put_with_http_info(x_vo_api_id, x_vo_api_key, body, incident_number, note_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.api_public_v1_incidents_incident_number_notes_note_name_put ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_note_name_put"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_note_name_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_note_name_put"
      end
      # verify the required parameter 'incident_number' is set
      if @api_client.config.client_side_validation && incident_number.nil?
        fail ArgumentError, "Missing the required parameter 'incident_number' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_note_name_put"
      end
      # verify the required parameter 'note_name' is set
      if @api_client.config.client_side_validation && note_name.nil?
        fail ArgumentError, "Missing the required parameter 'note_name' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_note_name_put"
      end
      # resource path
      local_var_path = '/api-public/v1/incidents/{incidentNumber}/notes/{noteName}'.sub('{' + 'incidentNumber' + '}', incident_number.to_s).sub('{' + 'noteName' + '}', note_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#api_public_v1_incidents_incident_number_notes_note_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Note
    # Create a new note.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body 
    # @param incident_number The incident number
    # @param [Hash] opts the optional parameters
    # @return [Notes]
    def api_public_v1_incidents_incident_number_notes_post(x_vo_api_id, x_vo_api_key, body, incident_number, opts = {})
      data, _status_code, _headers = api_public_v1_incidents_incident_number_notes_post_with_http_info(x_vo_api_id, x_vo_api_key, body, incident_number, opts)
      data
    end

    # Create a new Note
    # Create a new note.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body 
    # @param incident_number The incident number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Notes, Fixnum, Hash)>] Notes data, response status code and response headers
    def api_public_v1_incidents_incident_number_notes_post_with_http_info(x_vo_api_id, x_vo_api_key, body, incident_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.api_public_v1_incidents_incident_number_notes_post ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_post"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_post"
      end
      # verify the required parameter 'incident_number' is set
      if @api_client.config.client_side_validation && incident_number.nil?
        fail ArgumentError, "Missing the required parameter 'incident_number' when calling IncidentsApi.api_public_v1_incidents_incident_number_notes_post"
      end
      # resource path
      local_var_path = '/api-public/v1/incidents/{incidentNumber}/notes'.sub('{' + 'incidentNumber' + '}', incident_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Notes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#api_public_v1_incidents_incident_number_notes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new incident
    # Create a new incident.  This call replicates the function of our <a href=\"https://help.victorops.com/knowledge-base/manual-incident-creation/\">manual incident creation process</a>. Monitoring tools and custom integrations should be configured using our <a href=\"https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/\">REST Endpoint</a>.  The \"isMultiResponder\" option will require a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body The incident details
    # @param [Hash] opts the optional parameters
    # @return [Note]
    def api_public_v1_incidents_post(x_vo_api_id, x_vo_api_key, body, opts = {})
      data, _status_code, _headers = api_public_v1_incidents_post_with_http_info(x_vo_api_id, x_vo_api_key, body, opts)
      data
    end

    # Create a new incident
    # Create a new incident.  This call replicates the function of our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/manual-incident-creation/\&quot;&gt;manual incident creation process&lt;/a&gt;. Monitoring tools and custom integrations should be configured using our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/\&quot;&gt;REST Endpoint&lt;/a&gt;.  The \&quot;isMultiResponder\&quot; option will require a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body The incident details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Note, Fixnum, Hash)>] Note data, response status code and response headers
    def api_public_v1_incidents_post_with_http_info(x_vo_api_id, x_vo_api_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.api_public_v1_incidents_post ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling IncidentsApi.api_public_v1_incidents_post"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling IncidentsApi.api_public_v1_incidents_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IncidentsApi.api_public_v1_incidents_post"
      end
      # resource path
      local_var_path = '/api-public/v1/incidents'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Note')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#api_public_v1_incidents_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reroute one or more incidents to one or more new routable destinations.
    # Reroute one or more incidents to one or more users and/or escalation policies.  The \"addTargets\" option converts the incident to requiring a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body The reroute rules
    # @param [Hash] opts the optional parameters
    # @return [RerouteStatusResponse]
    def api_public_v1_incidents_reroute_post(x_vo_api_id, x_vo_api_key, body, opts = {})
      data, _status_code, _headers = api_public_v1_incidents_reroute_post_with_http_info(x_vo_api_id, x_vo_api_key, body, opts)
      data
    end

    # Reroute one or more incidents to one or more new routable destinations.
    # Reroute one or more incidents to one or more users and/or escalation policies.  The \&quot;addTargets\&quot; option converts the incident to requiring a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body The reroute rules
    # @param [Hash] opts the optional parameters
    # @return [Array<(RerouteStatusResponse, Fixnum, Hash)>] RerouteStatusResponse data, response status code and response headers
    def api_public_v1_incidents_reroute_post_with_http_info(x_vo_api_id, x_vo_api_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.api_public_v1_incidents_reroute_post ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling IncidentsApi.api_public_v1_incidents_reroute_post"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling IncidentsApi.api_public_v1_incidents_reroute_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IncidentsApi.api_public_v1_incidents_reroute_post"
      end
      # resource path
      local_var_path = '/api-public/v1/incidents/reroute'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RerouteStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#api_public_v1_incidents_reroute_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve an incident or list of incidents
    # The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body Ack/Resolve payload
    # @param [Hash] opts the optional parameters
    # @return [AckOrResolveResponse]
    def api_public_v1_incidents_resolve_patch(x_vo_api_id, x_vo_api_key, body, opts = {})
      data, _status_code, _headers = api_public_v1_incidents_resolve_patch_with_http_info(x_vo_api_id, x_vo_api_key, body, opts)
      data
    end

    # Resolve an incident or list of incidents
    # The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body Ack/Resolve payload
    # @param [Hash] opts the optional parameters
    # @return [Array<(AckOrResolveResponse, Fixnum, Hash)>] AckOrResolveResponse data, response status code and response headers
    def api_public_v1_incidents_resolve_patch_with_http_info(x_vo_api_id, x_vo_api_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IncidentsApi.api_public_v1_incidents_resolve_patch ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling IncidentsApi.api_public_v1_incidents_resolve_patch"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling IncidentsApi.api_public_v1_incidents_resolve_patch"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling IncidentsApi.api_public_v1_incidents_resolve_patch"
      end
      # resource path
      local_var_path = '/api-public/v1/incidents/resolve'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AckOrResolveResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IncidentsApi#api_public_v1_incidents_resolve_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
