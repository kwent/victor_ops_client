=begin
#VictorOps API

#This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  https protocol is required to use this API.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

OpenAPI spec version: 0.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module VictorOpsClient
  class UserContactMethodsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a contact device for a user
    # Delete a contact device for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param [Hash] opts the optional parameters
    # @return [ContactDevice]
    def api_public_v1_user_user_contact_methods_devices_contact_id_delete(x_vo_api_id, x_vo_api_key, user, contact_id, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_devices_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, opts)
      data
    end

    # Delete a contact device for a user
    # Delete a contact device for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContactDevice, Fixnum, Hash)>] ContactDevice data, response status code and response headers
    def api_public_v1_user_user_contact_methods_devices_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_delete ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_delete"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_delete"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_delete"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_delete"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods/devices/{contactId}'.sub('{' + 'user' + '}', user.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContactDevice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_devices_contact_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the indicated contact device for a user
    # Get the indicated contact device for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<ContactDevice>]
    def api_public_v1_user_user_contact_methods_devices_contact_id_get(x_vo_api_id, x_vo_api_key, user, contact_id, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_devices_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, opts)
      data
    end

    # Get the indicated contact device for a user
    # Get the indicated contact device for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContactDevice>, Fixnum, Hash)>] Array<ContactDevice> data, response status code and response headers
    def api_public_v1_user_user_contact_methods_devices_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_get"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_get"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_get"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods/devices/{contactId}'.sub('{' + 'user' + '}', user.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContactDevice>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_devices_contact_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a contact device for a user
    # Update a contact device for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param body The contact device
    # @param [Hash] opts the optional parameters
    # @return [ContactDevice]
    def api_public_v1_user_user_contact_methods_devices_contact_id_put(x_vo_api_id, x_vo_api_key, user, contact_id, body, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_devices_contact_id_put_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, body, opts)
      data
    end

    # Update a contact device for a user
    # Update a contact device for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param body The contact device
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContactDevice, Fixnum, Hash)>] ContactDevice data, response status code and response headers
    def api_public_v1_user_user_contact_methods_devices_contact_id_put_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_put ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_put"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_put"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_put"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_contact_id_put"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods/devices/{contactId}'.sub('{' + 'user' + '}', user.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContactDevice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_devices_contact_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all contact devices for a user
    # Get the contact methods for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param [Hash] opts the optional parameters
    # @return [Array<ContactDevice>]
    def api_public_v1_user_user_contact_methods_devices_get(x_vo_api_id, x_vo_api_key, user, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_devices_get_with_http_info(x_vo_api_id, x_vo_api_key, user, opts)
      data
    end

    # Get a list of all contact devices for a user
    # Get the contact methods for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContactDevice>, Fixnum, Hash)>] Array<ContactDevice> data, response status code and response headers
    def api_public_v1_user_user_contact_methods_devices_get_with_http_info(x_vo_api_id, x_vo_api_key, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_get"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_devices_get"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods/devices'.sub('{' + 'user' + '}', user.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContactDevice>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_devices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a contact email for a user
    # Delete the indicated contact email for the user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param [Hash] opts the optional parameters
    # @return [UserContact]
    def api_public_v1_user_user_contact_methods_emails_contact_id_delete(x_vo_api_id, x_vo_api_key, user, contact_id, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_emails_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, opts)
      data
    end

    # Delete a contact email for a user
    # Delete the indicated contact email for the user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserContact, Fixnum, Hash)>] UserContact data, response status code and response headers
    def api_public_v1_user_user_contact_methods_emails_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_contact_id_delete ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_contact_id_delete"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_contact_id_delete"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_contact_id_delete"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_contact_id_delete"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods/emails/{contactId}'.sub('{' + 'user' + '}', user.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserContact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_emails_contact_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the indicated contact email for a user
    # Get the indicated contact email for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<UserContact>]
    def api_public_v1_user_user_contact_methods_emails_contact_id_get(x_vo_api_id, x_vo_api_key, user, contact_id, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_emails_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, opts)
      data
    end

    # Get the indicated contact email for a user
    # Get the indicated contact email for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserContact>, Fixnum, Hash)>] Array<UserContact> data, response status code and response headers
    def api_public_v1_user_user_contact_methods_emails_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_contact_id_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_contact_id_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_contact_id_get"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_contact_id_get"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_contact_id_get"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods/emails/{contactId}'.sub('{' + 'user' + '}', user.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UserContact>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_emails_contact_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all contact emails for a user
    # Get the contact emails for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param [Hash] opts the optional parameters
    # @return [Array<UserContact>]
    def api_public_v1_user_user_contact_methods_emails_get(x_vo_api_id, x_vo_api_key, user, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_emails_get_with_http_info(x_vo_api_id, x_vo_api_key, user, opts)
      data
    end

    # Get a list of all contact emails for a user
    # Get the contact emails for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserContact>, Fixnum, Hash)>] Array<UserContact> data, response status code and response headers
    def api_public_v1_user_user_contact_methods_emails_get_with_http_info(x_vo_api_id, x_vo_api_key, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_get"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_get"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods/emails'.sub('{' + 'user' + '}', user.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UserContact>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_emails_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a contact emails for a user
    # Create a contact email for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param body The contact email
    # @param [Hash] opts the optional parameters
    # @return [UserContact]
    def api_public_v1_user_user_contact_methods_emails_post(x_vo_api_id, x_vo_api_key, user, body, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_emails_post_with_http_info(x_vo_api_id, x_vo_api_key, user, body, opts)
      data
    end

    # Create a contact emails for a user
    # Create a contact email for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param body The contact email
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserContact, Fixnum, Hash)>] UserContact data, response status code and response headers
    def api_public_v1_user_user_contact_methods_emails_post_with_http_info(x_vo_api_id, x_vo_api_key, user, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_post ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_post"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_post"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_emails_post"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods/emails'.sub('{' + 'user' + '}', user.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserContact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_emails_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all contact methods for a user
    # Get the contact methods for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def api_public_v1_user_user_contact_methods_get(x_vo_api_id, x_vo_api_key, user, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_get_with_http_info(x_vo_api_id, x_vo_api_key, user, opts)
      data
    end

    # Get a list of all contact methods for a user
    # Get the contact methods for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def api_public_v1_user_user_contact_methods_get_with_http_info(x_vo_api_id, x_vo_api_key, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_get"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_get"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods'.sub('{' + 'user' + '}', user.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a contact phone for a user
    # Delete the indicated contact phone for the user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param [Hash] opts the optional parameters
    # @return [UserContact]
    def api_public_v1_user_user_contact_methods_phones_contact_id_delete(x_vo_api_id, x_vo_api_key, user, contact_id, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_phones_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, opts)
      data
    end

    # Delete a contact phone for a user
    # Delete the indicated contact phone for the user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserContact, Fixnum, Hash)>] UserContact data, response status code and response headers
    def api_public_v1_user_user_contact_methods_phones_contact_id_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_contact_id_delete ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_contact_id_delete"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_contact_id_delete"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_contact_id_delete"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_contact_id_delete"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods/phones/{contactId}'.sub('{' + 'user' + '}', user.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserContact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_phones_contact_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the indicated contact phone for a user
    # Get the indicated contact phone for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<UserContact>]
    def api_public_v1_user_user_contact_methods_phones_contact_id_get(x_vo_api_id, x_vo_api_key, user, contact_id, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_phones_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, opts)
      data
    end

    # Get the indicated contact phone for a user
    # Get the indicated contact phone for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param contact_id The unique contact identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserContact>, Fixnum, Hash)>] Array<UserContact> data, response status code and response headers
    def api_public_v1_user_user_contact_methods_phones_contact_id_get_with_http_info(x_vo_api_id, x_vo_api_key, user, contact_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_contact_id_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_contact_id_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_contact_id_get"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_contact_id_get"
      end
      # verify the required parameter 'contact_id' is set
      if @api_client.config.client_side_validation && contact_id.nil?
        fail ArgumentError, "Missing the required parameter 'contact_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_contact_id_get"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods/phones/{contactId}'.sub('{' + 'user' + '}', user.to_s).sub('{' + 'contactId' + '}', contact_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UserContact>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_phones_contact_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all contact phones for a user
    # Get the contact phones for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param [Hash] opts the optional parameters
    # @return [Array<UserContact>]
    def api_public_v1_user_user_contact_methods_phones_get(x_vo_api_id, x_vo_api_key, user, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_phones_get_with_http_info(x_vo_api_id, x_vo_api_key, user, opts)
      data
    end

    # Get a list of all contact phones for a user
    # Get the contact phones for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserContact>, Fixnum, Hash)>] Array<UserContact> data, response status code and response headers
    def api_public_v1_user_user_contact_methods_phones_get_with_http_info(x_vo_api_id, x_vo_api_key, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_get"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_get"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods/phones'.sub('{' + 'user' + '}', user.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<UserContact>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_phones_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a contact phones for a user
    # Create a contact phone for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param body The contact phone
    # @param [Hash] opts the optional parameters
    # @return [UserContact]
    def api_public_v1_user_user_contact_methods_phones_post(x_vo_api_id, x_vo_api_key, user, body, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_contact_methods_phones_post_with_http_info(x_vo_api_id, x_vo_api_key, user, body, opts)
      data
    end

    # Create a contact phones for a user
    # Create a contact phone for a user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user ID
    # @param body The contact phone
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserContact, Fixnum, Hash)>] UserContact data, response status code and response headers
    def api_public_v1_user_user_contact_methods_phones_post_with_http_info(x_vo_api_id, x_vo_api_key, user, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_post ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_post"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_post"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserContactMethodsApi.api_public_v1_user_user_contact_methods_phones_post"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/contact-methods/phones'.sub('{' + 'user' + '}', user.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserContact')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserContactMethodsApi#api_public_v1_user_user_contact_methods_phones_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
