=begin
#VictorOps API

#This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  https protocol is required to use this API.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

OpenAPI spec version: 0.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module VictorOpsClient
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add multiple users
    # Add users to your organization  This API may be called a maximum of 1 time per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ParametersaddUserPayload>] :users 
    # @return [Array<BatchAddUserEntry>]
    def api_public_v1_user_batch_post(x_vo_api_id, x_vo_api_key, opts = {})
      data, _status_code, _headers = api_public_v1_user_batch_post_with_http_info(x_vo_api_id, x_vo_api_key, opts)
      data
    end

    # Add multiple users
    # Add users to your organization  This API may be called a maximum of 1 time per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ParametersaddUserPayload>] :users 
    # @return [Array<(Array<BatchAddUserEntry>, Fixnum, Hash)>] Array<BatchAddUserEntry> data, response status code and response headers
    def api_public_v1_user_batch_post_with_http_info(x_vo_api_id, x_vo_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.api_public_v1_user_batch_post ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UsersApi.api_public_v1_user_batch_post"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UsersApi.api_public_v1_user_batch_post"
      end
      # resource path
      local_var_path = '/api-public/v1/user/batch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'users'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BatchAddUserEntry>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_public_v1_user_batch_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List users
    # __NOTE: This call is deprecated. Please use `GET /api-public/v2/user` instead.__  Get a list of users for your organization  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param [Hash] opts the optional parameters
    # @return [ListUserResponse]
    def api_public_v1_user_get(x_vo_api_id, x_vo_api_key, opts = {})
      data, _status_code, _headers = api_public_v1_user_get_with_http_info(x_vo_api_id, x_vo_api_key, opts)
      data
    end

    # List users
    # __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/user&#x60; instead.__  Get a list of users for your organization  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListUserResponse, Fixnum, Hash)>] ListUserResponse data, response status code and response headers
    def api_public_v1_user_get_with_http_info(x_vo_api_id, x_vo_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.api_public_v1_user_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UsersApi.api_public_v1_user_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UsersApi.api_public_v1_user_get"
      end
      # resource path
      local_var_path = '/api-public/v1/user'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListUserResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_public_v1_user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a user
    # __NOTE: Use of the admin parameter is deprecated.  All calls to add a user will set admin to false.  Add a user to your organization  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AddUserResponse]
    def api_public_v1_user_post(x_vo_api_id, x_vo_api_key, body, opts = {})
      data, _status_code, _headers = api_public_v1_user_post_with_http_info(x_vo_api_id, x_vo_api_key, body, opts)
      data
    end

    # Add a user
    # __NOTE: Use of the admin parameter is deprecated.  All calls to add a user will set admin to false.  Add a user to your organization  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddUserResponse, Fixnum, Hash)>] AddUserResponse data, response status code and response headers
    def api_public_v1_user_post_with_http_info(x_vo_api_id, x_vo_api_key, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.api_public_v1_user_post ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UsersApi.api_public_v1_user_post"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UsersApi.api_public_v1_user_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UsersApi.api_public_v1_user_post"
      end
      # resource path
      local_var_path = '/api-public/v1/user'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddUserResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_public_v1_user_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove a user
    # Remove a user from your organization. You can choose a user to act as a replacement or let VictorOps handle finding the replacement. User will be replaced in their on-call rotations, escalation policies and scheduled overrides.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user to be deleted
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_public_v1_user_user_delete(x_vo_api_id, x_vo_api_key, user, body, opts = {})
      api_public_v1_user_user_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, body, opts)
      nil
    end

    # Remove a user
    # Remove a user from your organization. You can choose a user to act as a replacement or let VictorOps handle finding the replacement. User will be replaced in their on-call rotations, escalation policies and scheduled overrides.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user to be deleted
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def api_public_v1_user_user_delete_with_http_info(x_vo_api_id, x_vo_api_key, user, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.api_public_v1_user_user_delete ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UsersApi.api_public_v1_user_user_delete"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UsersApi.api_public_v1_user_user_delete"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UsersApi.api_public_v1_user_user_delete"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UsersApi.api_public_v1_user_user_delete"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}'.sub('{' + 'user' + '}', user.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_public_v1_user_user_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve information for a user
    # Get the information for the specified user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user to fetch
    # @param [Hash] opts the optional parameters
    # @return [AddUserResponse]
    def api_public_v1_user_user_get(x_vo_api_id, x_vo_api_key, user, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_get_with_http_info(x_vo_api_id, x_vo_api_key, user, opts)
      data
    end

    # Retrieve information for a user
    # Get the information for the specified user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user to fetch
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddUserResponse, Fixnum, Hash)>] AddUserResponse data, response status code and response headers
    def api_public_v1_user_user_get_with_http_info(x_vo_api_id, x_vo_api_key, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.api_public_v1_user_user_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UsersApi.api_public_v1_user_user_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UsersApi.api_public_v1_user_user_get"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UsersApi.api_public_v1_user_user_get"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}'.sub('{' + 'user' + '}', user.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddUserResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_public_v1_user_user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a user
    # Update the designated user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user to be updated
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AddUserResponse]
    def api_public_v1_user_user_put(x_vo_api_id, x_vo_api_key, user, body, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_put_with_http_info(x_vo_api_id, x_vo_api_key, user, body, opts)
      data
    end

    # Update a user
    # Update the designated user  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user to be updated
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddUserResponse, Fixnum, Hash)>] AddUserResponse data, response status code and response headers
    def api_public_v1_user_user_put_with_http_info(x_vo_api_id, x_vo_api_key, user, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.api_public_v1_user_user_put ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UsersApi.api_public_v1_user_user_put"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UsersApi.api_public_v1_user_user_put"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UsersApi.api_public_v1_user_user_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UsersApi.api_public_v1_user_user_put"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}'.sub('{' + 'user' + '}', user.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AddUserResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_public_v1_user_user_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve the user's team membership
    # This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user
    # @param [Hash] opts the optional parameters
    # @return [UserTeamsResponse]
    def api_public_v1_user_user_teams_get(x_vo_api_id, x_vo_api_key, user, opts = {})
      data, _status_code, _headers = api_public_v1_user_user_teams_get_with_http_info(x_vo_api_id, x_vo_api_key, user, opts)
      data
    end

    # Retrieve the user&#39;s team membership
    # This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param user The VictorOps user
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserTeamsResponse, Fixnum, Hash)>] UserTeamsResponse data, response status code and response headers
    def api_public_v1_user_user_teams_get_with_http_info(x_vo_api_id, x_vo_api_key, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.api_public_v1_user_user_teams_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UsersApi.api_public_v1_user_user_teams_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UsersApi.api_public_v1_user_user_teams_get"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling UsersApi.api_public_v1_user_user_teams_get"
      end
      # resource path
      local_var_path = '/api-public/v1/user/{user}/teams'.sub('{' + 'user' + '}', user.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserTeamsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_public_v1_user_user_teams_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List users
    # Get a list of users for your organization. Optionally, search for users by email address.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email An email address with which to search for users
    # @return [ListUserResponse]
    def api_public_v2_user_get(x_vo_api_id, x_vo_api_key, opts = {})
      data, _status_code, _headers = api_public_v2_user_get_with_http_info(x_vo_api_id, x_vo_api_key, opts)
      data
    end

    # List users
    # Get a list of users for your organization. Optionally, search for users by email address.  This API may be called a maximum of 2 times per second. 
    # @param x_vo_api_id Your API ID
    # @param x_vo_api_key Your API Key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email An email address with which to search for users
    # @return [Array<(ListUserResponse, Fixnum, Hash)>] ListUserResponse data, response status code and response headers
    def api_public_v2_user_get_with_http_info(x_vo_api_id, x_vo_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.api_public_v2_user_get ...'
      end
      # verify the required parameter 'x_vo_api_id' is set
      if @api_client.config.client_side_validation && x_vo_api_id.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_id' when calling UsersApi.api_public_v2_user_get"
      end
      # verify the required parameter 'x_vo_api_key' is set
      if @api_client.config.client_side_validation && x_vo_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_vo_api_key' when calling UsersApi.api_public_v2_user_get"
      end
      # resource path
      local_var_path = '/api-public/v2/user'

      # query parameters
      query_params = {}
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-VO-Api-Id'] = x_vo_api_id
      header_params[:'X-VO-Api-Key'] = x_vo_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListUserResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#api_public_v2_user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
