=begin
#VictorOps API

#This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  https protocol is required to use this API.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 

OpenAPI spec version: 0.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module VictorOpsClient
  class OnCallEntry
    attr_accessor :on_call_user

    attr_accessor :override_on_call_user

    attr_accessor :on_call_type

    attr_accessor :rotation_name

    attr_accessor :shift_name

    # The shift roll time (ISO 8601)
    attr_accessor :shift_roll

    attr_accessor :rolls

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'on_call_user' => :'onCallUser',
        :'override_on_call_user' => :'overrideOnCallUser',
        :'on_call_type' => :'onCallType',
        :'rotation_name' => :'rotationName',
        :'shift_name' => :'shiftName',
        :'shift_roll' => :'shiftRoll',
        :'rolls' => :'rolls'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'on_call_user' => :'User',
        :'override_on_call_user' => :'User',
        :'on_call_type' => :'OnCallType',
        :'rotation_name' => :'String',
        :'shift_name' => :'String',
        :'shift_roll' => :'String',
        :'rolls' => :'Array<OnCallRoll>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'onCallUser')
        self.on_call_user = attributes[:'onCallUser']
      end

      if attributes.has_key?(:'overrideOnCallUser')
        self.override_on_call_user = attributes[:'overrideOnCallUser']
      end

      if attributes.has_key?(:'onCallType')
        self.on_call_type = attributes[:'onCallType']
      end

      if attributes.has_key?(:'rotationName')
        self.rotation_name = attributes[:'rotationName']
      end

      if attributes.has_key?(:'shiftName')
        self.shift_name = attributes[:'shiftName']
      end

      if attributes.has_key?(:'shiftRoll')
        self.shift_roll = attributes[:'shiftRoll']
      end

      if attributes.has_key?(:'rolls')
        if (value = attributes[:'rolls']).is_a?(Array)
          self.rolls = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @on_call_type.nil?
        invalid_properties.push('invalid value for "on_call_type", on_call_type cannot be nil.')
      end

      if @rolls.nil?
        invalid_properties.push('invalid value for "rolls", rolls cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @on_call_type.nil?
      return false if @rolls.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          on_call_user == o.on_call_user &&
          override_on_call_user == o.override_on_call_user &&
          on_call_type == o.on_call_type &&
          rotation_name == o.rotation_name &&
          shift_name == o.shift_name &&
          shift_roll == o.shift_roll &&
          rolls == o.rolls
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [on_call_user, override_on_call_user, on_call_type, rotation_name, shift_name, shift_roll, rolls].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = VictorOpsClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
